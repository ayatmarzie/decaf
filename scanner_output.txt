lexem ---> token 
class ---> reserve_word
Program ---> id
{ ---> {
int ---> reserve_word
v1 ---> id
[ ---> [
100 ---> decimal_literal
] ---> ]
; ---> ;
int ---> reserve_word
max1 ---> id
; ---> ;
int ---> reserve_word
max2 ---> id
; ---> ;
void ---> reserve_word
main ---> id
( ---> (
) ---> )
{ ---> {
int ---> reserve_word
n ---> id
, ---> ,
i ---> id
; ---> ;
max1 ---> id
= ---> assign_op
0 ---> decimal_literal
; ---> ;
max2 ---> id
= ---> assign_op
0 ---> decimal_literal
; ---> ;
n ---> id
= ---> assign_op
10 ---> decimal_literal
; ---> ;
for ---> reserve_word
i ---> id
= ---> assign_op
0 ---> decimal_literal
, ---> ,
n ---> id
{ ---> {
v1 ---> id
[ ---> [
i ---> id
] ---> ]
= ---> assign_op
i ---> id
; ---> ;
} ---> }
for ---> reserve_word
i ---> id
= ---> assign_op
0 ---> decimal_literal
, ---> ,
n ---> id
{ ---> {
if ---> reserve_word
( ---> (
max1 ---> id
< ---> rel_op
v1 ---> id
[ ---> [
i ---> id
] ---> ]
) ---> )
{ ---> {
max2 ---> id
= ---> assign_op
max1 ---> id
; ---> ;
max1 ---> id
= ---> assign_op
v1 ---> id
[ ---> [
i ---> id
] ---> ]
; ---> ;
} ---> }
} ---> }
callout ---> reserve_word
( ---> (
"printf" ---> string_literal
, ---> ,
"The second max element is %d\n" ---> string_literal
, ---> ,
max2 ---> id
) ---> )
; ---> ;
} ---> }
} ---> }
